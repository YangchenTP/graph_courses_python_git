## Packages

```{python}
import pandas as pd
import country_converter as cc
```

## Data

```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## One to many joins

```{python} 
people
```

```{python}
test_info_many # multiple rows on each person
```

```{python}
pd.merge(people, test_info_many)
# people has only 3 people and test_info_many has 6 with repeating names
# age data is dupilcated in the result
```

## Practice Q: Merging One-to-Many Crop Yields

Run the code below to print the two small dataframes:

```{python}
farm_info
```

```{python}
crop_yields
```

If you use a merge() to join these datasets, how many rows will be in the final dataframe? Try to figure it out and then perform the join to see if you were right.
Answer: 5

```{python}
pd.merge(farm_info, crop_yields)
```

## Multiple Key Columns

```{python}
traffic_flow
```

```{python}
pollution_levels
```

```{python}
# Incorrect
pd.merge(traffic_flow, pollution_levels, on="street_name")
# this gives duplicated rows, example row 1 and 3 is same
```

```{python}
# Correct
pd.merge(traffic_flow, pollution_levels, on=["street_name","time_of_day"])
```

## Practice Q: Calculate Oil Consumption per Capita
We have two datasets containing information about countries:

- oil_consumption: Contains yearly oil consumption in tonnes
- tidyr_population: Contains yearly population data

```{python}
# View the datasets
oil_consumption.sort_values(by=["country", "year"])
```

```{python}
tidyr_population.sort_values(by=["country", "year"])
```

Join these datasets using merge() with a left join. Since we want to match both country AND year, youâ€™ll need to join on multiple columns. (You may notice that not all rows are matched. You can ignore this for now.)

```{python}
merge_left_oil = pd.merge(oil_consumption,tidyr_population, on =["country", "year"], how="left")
merge_left_oil
```

After joining, create a new column called consumption_per_capita that calculates the yearly oil consumption per person (in tonnes).

```{python}
merge_left_oil["consumption_per_capita"] = merge_left_oil["oil_consump"] / merge_left_oil["population"]
merge_left_oil
```

Which country had the highest per capita oil consumption in 1995?(should be Singapore)

```{python}
df_1995 = merge_left_oil[merge_left_oil['year'] == 1995].copy()

if not df_1995.empty:
     highest_per_capita_1995 = df_1995.loc[df_1995['consumption_per_capita'].idxmax()]

     country_highest_consumption_1995 = highest_per_capita_1995['country']
     max_consumption_1995 = highest_per_capita_1995['consumption_per_capita']
     
     print(f"\n--- Answer to 'Which country had the highest per capita oil consumption in 1995?' ---")
     print(f"The country with the highest per capita oil consumption in 1995 was: {country_highest_consumption_1995}")
     print(f"Per capita consumption in 1995: {max_consumption_1995:.4f} tonnes/person")

else:
    print("\nNo data available for the year 1995 in the merged dataset.")
    print("Please ensure your original datasets (oil_consumption and tidyr_population) contain data for 1995.")

# Display the relevant part of the DataFrame for verification (optional)
print("\nData for 1995 (sorted by consumption_per_capita):")
print(df_1995.sort_values(by='consumption_per_capita', ascending=False))

```

## Key Mismatches

```{python}
people
```

```{python}
test_info_diff
```

```{python}
pd.merge(people, test_info_diff)
# outputs only the rows that are common in both
```

```{python}
test_info_diff["name"] = test_info_diff["name"].str.title()
test_info_diff
# To capitalize and display the names
```

```{python}
pd.merge(people, test_info_diff)
# Charlie is not displayed since there is a trailing white space
```

```{python}
test_info_diff["name"].unique()
# it is a good way to see the white spaces that we cannot see in table
```

```{python}
test_info_diff["name"] = test_info_diff["name"].str.strip()
test_info_diff
# to remove white spaces
```

```{python}
pd.merge(people, test_info_diff)
# all 3 names displayed
```

## Practice Q: Inner Join Countries
The following two datasets contain data for India, Indonesia, and the Philippines. However, an inner join of these datasets only returns 1 row.

```{python}
asia_countries
```

```{python}
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

What are the differences between the values in the key columns that would have to be changed before joining the datasets? Pay attention to capitalization and spelling.

```{python}
# capitalization of i in Indonesia
# spelling of Phillipines
```

Now, fix the mismatched values in the Country column and try the join again.

```{python}
asia_population["Country"] = asia_population["Country"].str.title()
asia_population["Country"] = asia_population["Country"].replace("Philipines", "Philippines")
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

## Key Mismatches: Oil Consumption Example

```{python}
oil_consumption.sort_values(["country", "year"])
```

```{python}
tidyr_population
```

```{python}
oil_pop = pd.merge(oil_consumption, tidyr_population, how = "left", on=["country", "year"]).sort_values(["country", "year"])
oil_pop
# you can see some missing values in the table
# how to verify if the code went wrong or if the data just did not exist, use set arithmetic
```

```{python}
oil_countries = set(oil_consumption["country"]. unique())
pop_countries = set(tidyr_population["country"].unique())
# we have 2 sets now
# we can subtract sets from each other
```

```{python}
# this will show the countries in oil but not in pop
oil_countries - pop_countries
```

```{python}
pop_countries - oil_countries
```

## Side note on set arithmetic
```{python}
set1 = set([1,2,3,4,5])
set2 = set([2,3,4])

set1-set2
```

## Merging witn Country Codes

```{python}
cc.convert("Nigeria", to = "ISO3")
# try with examples below, gives same result
# cc.convert("Nigeria", to = "ISO3")
# cc.convert("nigeria", to = "ISO3")
```

```{python}
oil_consumption["country_code"] = cc.convert(oil_consumption["country"], to="ISO3")
tidyr_population["country_code"] = cc.convert(tidyr_population["country"], to="ISO3")
```

```{python}
oil_countries = set(oil_consumption["country_code"]. unique())
pop_countries = set(tidyr_population["country_code"].unique())
```

## Practice Q: Merging Oil Consumption with Geographic Data
Run the code to view the two datasets.

The first, oil_2012, records the oil consumption for the year 2012:

```{python}
oil_2012
```

```{python}
# this will show the countries in oil but not in pop
country_regions
```

Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continent. As a sanity check, your answer should include the US & China.

```{python}
oil_2012['country_code'] = cc.convert(oil_2012['country'], to='ISO3')

oil_2012_regions = oil_2012.merge(country_regions, on='country_code', how='left')

max_oil_by_continent = oil_2012_regions.loc[
    oil_2012_regions.groupby('continent')['oil_consump'].idxmax()
]

max_oil_by_continent[['country', 'continent', 'oil_consump']]
```
