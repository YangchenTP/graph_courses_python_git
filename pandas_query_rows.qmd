# Imports

```{python}
import pandas as pd
```

# Dataset

```{python}
yaounde = pd.read_csv("data/yaounde_data.csv")
```

```{python}
yao = yaounde[["age", "sex", "weight_kg", "neighborhood", "occupation", "symptoms", "is_smoker", "is_pregnant","igg_result", "igm_result"]]
yao
```

# Introduce query

Query lets us keep rows that staisfy a certian condition.

```{python}
yao.query("sex == 'Male' ")
# can also use yao.query('sex == "Male"') by changing the positions of the inverted commas
```

To access the number of values that fulfill the query:
```{python}
yao.query("sex == 'Male' ").shape
```

```{python}
yao.query("sex == 'Male' ").shape[0] # to access only the rows
# get the number of rows that fulfill the query
```

```{python}
# queries do not modify the dataframe itself
yao.query("sex == 'Male' ")
```

```{python}
# you need to create a new object/variable
yao_male = yao.query("sex == 'Male' ")
yao_male
```

## Practice Q: Subset for pregnant respondents

Pregnant individuals have the is_pregnant column set to "Yes". Subset just these individuals and store the result in a new frame called yao_pregnant.

```{python}
yao_pregnant = yao.query("is_pregnant == 'Yes' ")
yao_pregnant
```

# Relational operators

```{python}
yao.query("sex == 'Male' ") # Equal to
yao.query("sex != 'Male' ") # Not equal to
yao.query("age > 7 " ) # Greater than
yao.query("age >= 7 " ) # Greater than or equal to
yao.query("age < 7 " ) # less than
yao.query("age <= 7 " ) # less than or equal to
# isin - to check whether a value is an element in a longer list of things
yao.query("neighborhood.isin(['Briqueterie','Carriere'])")
```


## Practice Q1: Relational operators

From yao, keep only respondents who were children (under 18). Assign the result to a new DataFrame called yao_chidlren. There should be 291 rows.

```{python}
yao_children = yao.query("age < 18")
yao_children
```


## Practice Q2: Relational operators

With isn(), keep only respondents who live in the "Carrier" or "Ekoudou" neighborhoods. Assign the result to a new DataFrame called yao_carriere_ekoudou. There should be 426 rows.

```{python}
yao_carriere_ekoudou = yao.query("neighborhood.isin(['Carriere', 'Ekoudou'])")
yao_carriere_ekoudou
```

 # Accessing external variables

```{python}
min_age = 25

yao.query("age >= @min_age")
```

## Practice Q: Subset for yound respondents

From yao, keep respondents who are less than or equal to the variable max_age, defined below. Assign the result to a new DataFrame called yao_yound. There should be 590 rows.

```{python}
max_age = 30

yao_young = yao.query("age <= @max_age")
yao_young
```

# Combining conditions

```{python}
yao.query("age < 18 | age > 65") # to show data where age is less than 18 OR greater than 65
```

```{python}
# either pregnant OR ex-smokers
yao.query('is_pregnant =="Yes" | is_smoker == "Ex-smoker" ')
```

```{python}
# either pregnant AND ex-smokers
yao.query('is_pregnant =="Yes" & is_smoker == "Ex-smoker" ')
```

```{python}
# Get unique values in columns
yao.is_smoker.value_counts()
```

## Practice Q: Subset for IGG positive men

Subset yao to only keep men who tested IGG positive. Assign the result to a new DataFrame called yao_igg_positive_men. There should be 148 rows after your query. Think carefully about whether to use & or |.

```{python}
yao_igg_positive_men = yao.query("sex == 'Male' &  igg_result == 'Positive' ")
yao_igg_positive_men 
```

# Negating conditions with the ~ operator (tilda operator)

```{python}
# return individuals who do not fulfil the condition
yao.query(" ~ (occupation == 'Student') ")
```

```{python}
# equivalent to
yao.query("occupation != 'Student' ")
```

```{python}
yao.query(" ~ (age <18 | weight_kg < 30)")
```

## Practice Q: Drop smokers and drop those above 50

We want to avoid giving a drug to older individuals and smokers. From yao, drop respondents that are either above 50 or who are smokers. Use ~ to negate the conditions. Assign the result to a new DataFrame called yao_dropped. Your output should have 810 rows.

```{python}
yao_dropped = yao.query(" ~ (age > 50 | is_smoker == 'Smoker')")
yao_dropped
```

# NaN values - (NaN: Not a Number)

NaN is a special type of value that indicates misisng data in Python and requires special handling within the query method.

```{python}
# yao.query("is_pregnant == 'NaN' ")
# this does not work
```

```{python}
yao.query("is_pregnant.isna()")
```

```{python}
yao.query("is_pregnant.notna()")
```

# Practice Q: Keep Missing Smoking Status

From the yao dataset, keep all the respondents who had NA records for the report of their smoking status.

```{python}
yao.query("is_smoker.isna()")
```

# Querying based on string patterns

```{python}
yao.occupation.value_counts()
```

```{python}
# Values containing the string student
yao.query("occupation.str.contains('Student')")
```


```{python}
# Values NOT containing the string student
yao.query(" ~ (occupation.str.contains('Student'))")
```


```{python}
# contains students OR farmers
yao.query("occupation.str.contains('Student|Farmer')")
```

# Practice Q: Symptoms

Query yao to find respondents who reported "Cough" or "Fever" as symptoms. Your answer should have 219 rows.

```{python}
yao.query("symptoms.str.contains('Cough|Fever')")
```
 