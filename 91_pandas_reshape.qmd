## Imports

```{python}
import pandas as pd
import plotly.express as px
```

## Data

```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)

# Fuels Wide dataset
fuels_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_per_capita_wide.csv"
)

# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/euro_births_wide.csv"
)

# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)

# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```

## What do Wide and Long mean

In the wide dataset, each observational unit (each company) occupies only one row, with the repeated measurements (number of employees in different departments) spread across multiple columns.

In the long dataset, each observational unit is spread over multiple rows.

Vocab
The observational units, sometimes called statistical units, are the primary entities or items described by the dataset.

In the first example, the observational units were products; in the second example, countries; and in the third example, companies.


## Practice Q: Wide or Long?

Consider the temperatures dataset created earlier:

```{python}
temperatures
```

Is this data in a wide or long format?
Wide

## When to use Long and Wide Data

Wide: better for Displaying Information
Long: better for Analysis or Plotting

## From Wide to Long with 'melt()'

```{python}
fuels_wide
```

```{python}
fuels_wide.melt(id_vars=["Entity","Code"]).sort_values(["Entity", "variable"])
```

```{python}
fuels_long= fuels_wide.melt(
    id_vars=["Entity","Code"], 
    var_name = "year", 
    value_name = "oil_consumption"
).sort_values(["Entity", "year"])
```

```{python}
fuels_long["year"] = fuels_long["year"].str.replace("y_","").astype(int)
fuels_long
```

## Practice Q: Temperatures to Long

Convert the 'temperatures' dataset shown below into a long format. Your answer should have the following column names: **“country”**, **“year”**, and **“avg_temp”**.

```{python}
temperatures_long = temperatures.melt(
    id_vars=["country"],
    var_name="year",
    value_name = "avg_temp"
)
temperatures_long
```

## Practice Q: Eurostat Births to Long

For this practice question, you will use the 'euro_births_wide' dataset from Eurostat. It shows the annual number of births in 50 European countries:

```{python}
euro_births_wide
```

The data is in a wide format. Convert it to a long format DataFrame that has the following column names: **“country”**, **“year”**, and **“births_count”**.

Remove the x prefix from the year columns and convert them to integers.

```{python}
euro_births_long = euro_births_wide.melt(
    id_vars="country", var_name="year", value_name="births_count"
)
euro_births_long["year"] = euro_births_long["year"].str.replace("x", "").astype(int)

euro_births_long
```

## Using Long Data for Analysis

```{python}
fuels_wide
```

```{python}
fuels_long
```

Long data: easy to extract statistics

```{python}
# Average oil consumption per country using long data
fuels_long.groupbyby("Entity")["oil_consumption"]. mean()
```

Wide data: not so much

```{python}
# Average oil consumption per country using wide data, but it is long and you lose country
# to get country, it will be even longer
fuels_wide[['y_1970', 'y_1980', 'y_1990', 'y_2000', 'y_2010', 'y_2020']].mean(axis=1)
```

Long data is easier to plot.

```{python}
subset = fuels_long.query("Entity in ['Peru', 'Iran', 'China']")
subset
```

```{python}
px.line(subset, x= "year",
y="oil_consumption", color = "Entity")
```

## From Long to Wide with pivot()

```{python}
# to get number of contracts per state per year
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index()
contracts_summary
```

```{python}
contracts_summary.pivot(columns = "year", index = "state", values ="count").reset_index()
```

```{python}
contracts_summary.pivot(columns = "state", index = "year", values ="count").reset_index()
```

## Practice Q: Temperatures back to Wide

Convert the long 'temperatures_long' dataset you created above back to a wide format. Your answer should have the following column names: **“country”**, 
**“1994”**, **“1995”**, and **“1996”**.

```{python}
temperatures_long.pivot(
    columns = "year",
    index = "country",
    values = "avg_temp"
).reset_index()
```

## Practice Q: Population to Wide

The 'population' dataset shows the populations of 219 countries over time.

Reshape this data into a wide format.

```{python}
population_wide = population.pivot(
    columns ="year",
    index="country",
    values="population"
).reset_index()
population_wide
```
